'''
Project name : Laptop_Battery_Life
Created on : Thu Sep 25 19:33:54 2014
Author : Anant Pushkar
https://www.hackerrank.com/challenges/battery
'''
import sys
import numpy as np
from sklearn import datasets, linear_model 
from sklearn import gaussian_process
debug_mode = len(sys.argv)>1 and sys.argv[1]=="DEBUG"
def debug(msg):
	if debug_mode:
		print msg

x = [[2.81], [7.14], [2.72], [3.87], [1.9], [7.82], [7.02], [5.5], [9.15], [4.87], [8.08], [5.58], [9.13], [0.14], [2.0], [5.47], [0.8], [4.37], [5.31], [0.0], [1.78], [3.45], [6.13], [3.53], [4.61], [1.76], [6.39], [0.02], [9.69], [5.33], [6.37], [5.55], [7.8], [2.06], [7.79], [2.24], [9.71], [1.11], [8.38], [2.33], [1.83], [5.94], [9.2], [1.14], [4.15], [8.43], [5.68], [8.21], [1.75], [2.16], [4.93], [5.75], [1.26], [3.97], [4.39], [7.53], [1.98], [1.66], [2.04], [11.72], [4.64], [4.71], [3.77], [9.33], [1.83], [2.15], [1.58], [9.29], [1.27], [8.49], [5.39], [3.47], [6.48], [4.11], [1.85], [8.79], [0.13], [1.44], [5.96], [3.42], [1.89], [1.98], [5.26], [0.39], [6.05], [1.99], [1.58], [3.99], [4.35], [6.71], [2.58], [7.37], [5.77], [3.97], [3.65], [4.38], [8.06], [8.05], [1.1], [6.65]]
y = [[5.62], [8.0], [5.44], [7.74], [3.8], [8.0], [8.0], [8.0], [8.0], [8.0], [8.0], [8.0], [8.0], [0.28], [4.0], [8.0], [1.6], [8.0], [8.0], [0.0], [3.56], [6.9], [8.0], [7.06], [8.0], [3.52], [8.0], [0.04], [8.0], [8.0], [8.0], [8.0], [8.0], [4.12], [8.0], [4.48], [8.0], [2.22], [8.0], [4.66], [3.66], [8.0], [8.0], [2.28], [8.0], [8.0], [8.0], [8.0], [3.5], [4.32], [8.0], [8.0], [2.52], [7.94], [8.0], [8.0], [3.96], [3.32], [4.08], [8.0], [8.0], [8.0], [7.54], [8.0], [3.66], [4.3], [3.16], [8.0], [2.54], [8.0], [8.0], [6.94], [8.0], [8.0], [3.7], [8.0], [0.26], [2.88], [8.0], [6.84], [3.78], [3.96], [8.0], [0.78], [8.0], [3.98], [3.16], [7.98], [8.0], [8.0], [5.16], [8.0], [8.0], [7.94], [7.3], [8.0], [8.0], [8.0], [2.2], [8.0]]
'''
for line in open("trainingdata.txt").read().splitlines():
	line = str(line).split(",")
	x.append([float(line[0])])
	y.append([float(line[1])])
'''
regr = linear_model.LinearRegression()
regr.fit(x,y)
print regr.predict([float(raw_input())])[0]
